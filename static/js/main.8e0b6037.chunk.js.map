{"version":3,"sources":["components/PageHeader.jsx","components/Task.jsx","components/TaskList.jsx","components/Lists.jsx","components/ListFormModal.jsx","App.js","serviceWorker.js","index.js"],"names":["headerStyle","display","width","height","margin","padding","background","headerTitleStyle","menuIconStyle","fontSize","marginLeft","PageHeader","props","title","style","className","Task","state","showMenu","editing","editInput","taskStyle","borderBottom","buttonStyle","borderRadius","backgroundColor","color","border","decoration","shadow","marginBottom","inputStyle","editingOn","setState","editingOff","updateEdit","e","target","value","taskId","this","task","taskTitle","taskComplete","taskBody","float","taskTextStyle","cursor","onClick","marginRight","type","onChange","markComplete","bind","checked","console","log","placeholder","editTask","textDecoration","Component","Tasklist","newTaskTitle","locked","lockList","tasklist","completion","updateInput","updateDate","newTaskDate","submitTask","length","addTask","listId","progressStyle","percentage","transition","dueDate","tasks","tasklistStyle","deleteTaskList","completionBarStyle","map","key","checkBoxStyle","marginTop","position","textAlign","Lists","tasklists","ListFormModal","titleInput","dateInput","tasksInput","taskNum","newTasks","coverStyle","zIndex","overflow","modalHolder","opacity","modalElementStyle","modalBtn","updateTitle","updateTasksInput","submitList","info","listTitle","listDate","listTasks","numTasks","newTaskList","modalClose","close","newAddTask","modalShow","App","listHolderStyle","flexWrap","taskInput","TaskLists","newTask","toString","push","setPercentage","completeCounter","forEach","toFixed","edit","modalOpen","modalToggleElement","listInfo","numLists","taskCounter","taskInfo","TaskList","newTaskLists","listCounter","loadTaskLists","list","taskListData","JSON","stringify","localStorage","setItem","getItem","parse","prevProps","prevState","saveTaskLists","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e0b6037.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction PageHeader(props){\r\n    const title = props.title\r\n    return(\r\n        <header style ={headerStyle}>\r\n            <i className =  {'material-icons'} style = {menuIconStyle}>reorder</i>\r\n            <h1 style = {headerTitleStyle}>{title}</h1>\r\n        </header>\r\n    )\r\n}\r\n  \r\nconst headerStyle = {\r\n    display: 'flex',\r\n    width: '100vw',\r\n    height: '8vh',\r\n    margin: '0',\r\n    padding: '0',\r\n    background: '#95f0e2',\r\n    \r\n}\r\n\r\nconst headerTitleStyle = {\r\n   margin: 'auto auto'\r\n\r\n}\r\n\r\nconst menuIconStyle = {\r\n    fontSize : '7vh',\r\n    marginLeft : '2%' \r\n    \r\n\r\n}\r\n\r\nexport default PageHeader;\r\n\r\n\r\n","\r\nimport React, { Component } from 'react'\r\n\r\nexport default class Task extends Component {\r\n\r\n\r\n    state ={\r\n        showMenu: true,\r\n        editing: false,\r\n        editInput: ''\r\n    }\r\n\r\n    taskStyle = {\r\n \r\n        borderBottom : '2px solid #111111',\r\n        margin: '10px'\r\n    }\r\n\r\n    buttonStyle = {\r\n        borderRadius: '2px',\r\n        backgroundColor: '#95f0e2',\r\n        color: '#111111',\r\n        border: 'none',\r\n        decoration: 'none',\r\n        shadow: 'none',\r\n        width: '35px',\r\n        height: '15px',\r\n        marginLeft: '5px',\r\n        marginBottom: '3px',\r\n        padding: '1px'\r\n    }\r\n\r\n    inputStyle = {\r\n        display:'inline-block',\r\n        borderRadius: '3px',\r\n        decoration: 'none',\r\n        shadow: 'none', \r\n        border: '1px solid #eee',\r\n        marginBottom: '3px',\r\n        padding: '1px'\r\n    }\r\n\r\n    \r\n\r\n    \r\n    editingOn = () => this.setState({editing: true})\r\n\r\n    editingOff = () => this.setState({editing:false, editInput:''})\r\n\r\n    updateEdit = (e) => this.setState({editInput: e.target.value})\r\n\r\n    \r\n\r\n    render() {\r\n        let taskId = this.props.task.taskId;\r\n        let taskTitle = this.props.task.taskTitle;\r\n        let taskComplete = this.props.task.taskComplete\r\n        return (\r\n            <div style={this.taskStyle} >\r\n                {this.taskBody(taskId,taskTitle, taskComplete )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    taskBody(taskId, taskTitle, taskComplete){\r\n        if(this.state.editing === false){\r\n            return(\r\n                <span >\r\n                    <h6 style= {{display: 'inline-block', float:'left', padding: 0, marginLeft: '5px'}}>{taskId}</h6>\r\n                    <small style={this.taskTextStyle(taskComplete)} >{taskTitle}</small>\r\n                    {' '}\r\n                    <i style={{ display: 'inline-block',fontSize: '15px' , cursor: 'pointer' }} className = {'material-icons'} onClick={this.editingOn}>more_vert</i>\r\n                    {' '}\r\n                    <input style= {{display: 'inline-block', float:'right', cursor: 'pointer', marginRight: '5px'}} type=\"radio\" onChange = {this.props.markComplete.bind(this, taskId)}checked={taskComplete} />\r\n                </span>\r\n            )\r\n        }else{\r\n            console.log(this.state.editInput);\r\n            return(\r\n                <span>\r\n                    <h6 style= {{display: 'inline-block', float:'left', padding: 0, marginLeft: '5px'}}>{taskId}</h6>\r\n                    <input style={this.inputStyle} type=\"text\" placeholder=\"Title...\" onChange={this.updateEdit} />\r\n                    <button style={this.buttonStyle} onClick={this.props.editTask.bind(this, taskId, this.state.editInput)} >Edit</button>\r\n                    <i style={{fontSize: '15px', display: 'inline-block', float:'right', cursor: 'pointer', marginRight: '5px' }} className = {'material-icons'} onClick={this.editingOff} >close</i>\r\n                </span>\r\n            )\r\n        }\r\n    }\r\n\r\n    taskTextStyle(taskComplete){\r\n        if(taskComplete === true){\r\n            return {\r\n                display: 'inline-block',\r\n                textDecoration : 'line-through'\r\n            }\r\n        }else{\r\n            return {\r\n                display: 'inline-block'\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n","import React, {Component} from 'react';\r\nimport Task from './Task';\r\n\r\n\r\nclass Tasklist extends Component {\r\n     \r\n    state = {\r\n        newTaskTitle: '',\r\n        locked: false,\r\n    }\r\n\r\n    inputStyle = {\r\n        display:'inline-block',\r\n        borderRadius: '3px',\r\n        decoration: 'none',\r\n        shadow: 'none', \r\n        border: '1px solid #eee',\r\n        marginBottom: '3px',\r\n        padding: '1px'\r\n    }\r\n    \r\n\r\n\r\n    lockList = () =>{\r\n        console.log('Locking')\r\n        if (this.props.tasklist.completion === '100%') {\r\n\r\n            if(this.state.locked === false){\r\n                this.setState({locked: true})\r\n                console.log('List locked')\r\n            }else{\r\n                this.setState({locked: false})\r\n                console.log('List unlocked')\r\n            }\r\n        }\r\n\r\n    }\r\n    updateInput = (e) => this.setState({newTaskTitle: e.target.value });\r\n\r\n    updateDate = (e) => this.setState({newTaskDate: e.target.value});\r\n\r\n    submitTask = () => {\r\n\r\n        if(this.state.locked === false  && this.state.newTaskTitle.length >= 3){\r\n            this.props.addTask(this.props.tasklist.listId, this.state.newTaskTitle);\r\n            this.setState({newTaskTitle: ''});\r\n        }else{\r\n            console.log(\"list is either locked or yot task title is shorter than 3 characters\")\r\n        }\r\n     \r\n    }\r\n\r\n\r\n    progressStyle = (percentage) =>{\r\n        return {\r\n            width: percentage,\r\n            backgroundColor : '#95f0e2',\r\n            height: '100%',\r\n            margin: '0',\r\n            padding: '0',\r\n            borderRadius: '5px',\r\n            transition: 'width 2s',\r\n            fontSize: '15px'\r\n        }\r\n\r\n    }  \r\n    \r\n  \r\n\r\n    render() {\r\n        const {listId, title, dueDate, tasks, completion} = this.props.tasklist;\r\n        console.log(this.state.newTaskTitle, this.state.newTaskDate);\r\n        \r\n        return (\r\n            <div style = {tasklistStyle} >\r\n                 <i style={{fontSize: '15px', display: 'block', float:'right', cursor: 'pointer', marginRight: '5px' }} className = {'material-icons'} onClick={this.props.deleteTaskList.bind(this, listId)} >close</i>\r\n                <h3 style={{margin: '3px'}}>{title}</h3>\r\n                <div className=\"Task-completion-bar\" style={completionBarStyle} >\r\n                    <div className=\"Task-completion-progress\" style={this.progressStyle(completion)}>\r\n                        {completion}\r\n                    </div>\r\n                </div>\r\n                <span>Due: {dueDate}</span>\r\n                {tasks.map((task) =>{\r\n                 return (\r\n                     <Task key={task.taskId} task={task} markComplete={this.props.markComplete.bind(this, listId)} editTask={this.props.editTask.bind(this, listId)} />\r\n                 )\r\n             })}\r\n            \r\n            \r\n             <span>\r\n                 <input type=\"text\" placeholder=\"Add task...\" style={this.inputStyle} value={this.state.newTaskTitle} onChange={this.updateInput} /> \r\n                 <button style={buttonStyle} onClick={this.submitTask}>add</button>\r\n             </span>\r\n\r\n             <span style={checkBoxStyle}>\r\n                 <small>Lock list:</small><input type=\"checkbox\" onClick={this.lockList} checked={this.state.locked} />\r\n             </span>\r\n\r\n         </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tasklist;\r\n\r\nconst completionBarStyle = {\r\n    backgroundColor: '#878787',\r\n    borderRadius: '5px',\r\n    width:'70%',\r\n    height:'15px',\r\n    margin: 'auto',\r\n    marginTop: '15px',\r\n    marginBottom: '15px'\r\n}\r\n\r\nconst tasklistStyle = {\r\n    position: 'relative',\r\n    textAlign: 'center',\r\n    border: '2px solid #111111',\r\n    width: '300px',\r\n    borderRadius: '4px',\r\n    margin: '15px',\r\n    padding: '10px'\r\n\r\n}\r\n\r\nconst checkBoxStyle = {\r\n    display: 'block',\r\n    margin: 'auto',\r\n    marginTop: '10px'\r\n}\r\n\r\n\r\nconst buttonStyle = {\r\n    borderRadius: '2px',\r\n    backgroundColor: '#95f0e2',\r\n    color: '#111111',\r\n    border: 'none',\r\n    decoration: 'none',\r\n    shadow: 'none',\r\n    padding: '10',\r\n    width: '35px',\r\n    height: '18px',\r\n    marginLeft: '5px'\r\n}","import React from 'react';\r\nimport Tasklist from './TaskList';\r\n\r\nfunction Lists(props){\r\n    const lists = props.tasklists;\r\n    // console.log(lists)\r\n    return lists.map((tasklist) =>{\r\n        return(\r\n            \r\n            <Tasklist key= {tasklist.listId} tasklist ={tasklist} markComplete={props.markComplete} addTask={props.addTask} editTask={props.editTask} deleteTaskList={props.deleteTaskList} />\r\n            \r\n        )\r\n    })\r\n}\r\n\r\nexport default Lists ;","import React, { Component } from 'react';\r\n\r\nclass ListFormModal extends Component {\r\n\r\n    state={\r\n\r\n        titleInput: '',\r\n        dateInput: '',\r\n        tasksInput:'',\r\n        taskNum: 0,\r\n\r\n        newTasks:[\r\n           \r\n\r\n        ]\r\n    }\r\n\r\n\r\n    coverStyle = {\r\n        width: '100vw',\r\n        height: '100vh',\r\n        zIndex: '10',\r\n        position: 'fixed',\r\n        overflow: 'hidden'\r\n    }\r\n\r\n\r\n    modalHolder = {\r\n        width: '250px',\r\n        height: '400px',\r\n        backgroundColor: '#fff',\r\n        zIndex: '12',\r\n        margin: ' 0 auto',\r\n        textAlign: 'center',\r\n        marginTop: '100',\r\n        opacity: '100%',\r\n        borderRadius: '4px',\r\n        border: '1px solid #111'\r\n    }\r\n\r\n    modalElementStyle = {\r\n        display: 'block',\r\n        margin: 'auto',\r\n        marginTop: '10px',\r\n        marginBottom: '10px'\r\n        \r\n\r\n    }\r\n\r\n    modalBtn = {\r\n        borderRadius: '4px',\r\n        backgroundColor: '#95f0e2',\r\n        color: '#111',\r\n        decoration: 'none',\r\n        shadow: 'none',\r\n        border: 'none',\r\n        padding: '2px'\r\n    }\r\n\r\n    updateTitle = (e) => this.setState({titleInput: e.target.value})\r\n\r\n    updateDate = (e) => this.setState({dateInput: e.target.value})\r\n\r\n    updateTasksInput = (e) => this.setState({tasksInput: e.target.value})\r\n\r\n    submitList = () => {\r\n\r\n        if(this.state.titleInput !== '' && this.state.dateInput !== ''){\r\n            let info ={\r\n                listTitle: this.state.titleInput,\r\n                listDate: this.state.dateInput,\r\n                listTasks: this.state.newTasks,\r\n                numTasks: this.state.taskNum\r\n\r\n            }\r\n\r\n            this.props.newTaskList(info)\r\n            this.setState({titleInput : '', dateInput:'', taskNum: 0, newTasks: []})\r\n            this.props.modalClose()\r\n\r\n        }\r\n    }\r\n\r\n    close = () =>{\r\n        console.log('close')\r\n    }\r\n\r\n    newAddTask = () => {\r\n        this.setState({taskNum: this.state.taskNum + 1})\r\n        if(this.state.tasksInput.length >= 3){\r\n            let task = {\r\n                taskId: this.state.taskNum,\r\n                taskTitle: this.state.tasksInput\r\n            }\r\n    \r\n            this.setState({newTasks: [ ...this.state.newTasks, task], tasksInput: ''})    \r\n\r\n        }\r\n    }\r\n\r\n    newTasks(){\r\n            this.state.newTasks.map((task) => {\r\n                console.log(task.taskTitle)\r\n                return(\r\n                    <>\r\n                        <span>{task.taskTitle}</span>\r\n                    </>\r\n                )   \r\n        })\r\n\r\n    }\r\n\r\n    render() {\r\n        let open = this.props.modalShow;\r\n        if(open === true){\r\n            return (\r\n            \r\n                <div className=\"Modal-Overlay\" style={this.coverStyle} >\r\n                    <div className=\"Modal-Holder\" style={this.modalHolder}>\r\n                            <div>\r\n                                <i style={{fontSize: '15px', cursor: 'pointer', float: 'right', margin: '5px' }} className = {'material-icons'} onClick={this.props.modalClose} >close</i>\r\n                            </div>\r\n                            <h3 style={this.modalElementStyle} >New Task List</h3>\r\n    \r\n                            <div>\r\n                                <input style={this.modalElementStyle} type=\"text\" value={this.state.titleInput} onChange={this.updateTitle} placeholder=\"List Title...\"/>\r\n                                <input style={this.modalElementStyle} type=\"date\" value={this.state.dateInput} onChange={this.updateDate} placeholder=\"Due Date\" />\r\n                                <span style={this.modalElementStyle}>\r\n                                    <input  type=\"text\" value={this.state.tasksInput} onChange={this.updateTasksInput} placeholder=\"Task...\" />\r\n                                    <button style={ {marginLeft:'5px'}} onClick={this.newAddTask} >Add</button>\r\n                                </span>\r\n                                \r\n                            </div>\r\n                            <div>\r\n                            </div>\r\n    \r\n                            <div>\r\n                                {this.state.newTasks.map((task) => {\r\n                                    \r\n                                    return(\r\n                                        <span style={this.modalElementStyle} >{task.taskTitle}</span>\r\n                                    )\r\n                                })}\r\n                            </div>\r\n    \r\n                            <button style={this.modalBtn} onClick={this.submitList} >Create List</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }else{\r\n            return null;\r\n        }\r\n       \r\n    }\r\n}\r\n\r\nexport default ListFormModal;\r\n\r\n","import React, { Component } from 'react';\r\nimport PageHeader from './components/PageHeader';\r\nimport Lists from './components/Lists';\r\nimport ListFormModal from './components/ListFormModal'\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super()\r\n\r\n    let listCounter = 0;\r\n    let tasklists;\r\n    if(this.loadTaskLists() !== null){\r\n        tasklists = this.loadTaskLists()\r\n        tasklists.forEach((list) => listCounter++);\r\n        console.log(listCounter)\r\n        this.state ={\r\n          modalShow: false,\r\n          numLists: listCounter,\r\n\r\n          TaskLists: tasklists\r\n\r\n          \r\n        }\r\n\r\n    }else{\r\n      this.state = {\r\n        modalShow: false,\r\n        numLists: 0,\r\n        TaskLists:[\r\n              // {\r\n                // listId: 1,\r\n                // title: 'Daily Tasks',\r\n                // dueDate: '00-00-0000',\r\n                // completion: '0%',\r\n                // numTasks: 3,\r\n                // tasks:[\r\n                  // {\r\n                    // taskId: 1.1,\r\n                    // taskTitle: 'Make bed',\r\n                    // taskComplete: false\r\n                  // },\r\n                  // {\r\n                    // taskId: 1.2,\r\n                    // taskTitle: 'Cook Dinner',\r\n                    // taskComplete: false\r\n                  // },\r\n                  // {\r\n                    // taskId: 1.3,\r\n                    // taskTitle: 'Clean up',\r\n                    // taskComplete: false\r\n                  // }\r\n                // ]\r\n              // },\r\n              // {\r\n                // listId: 2,\r\n                // title: 'Personal goals',\r\n                // dueDate: '12-12-2021',\r\n                // completion: '0%',\r\n                // numTasks: 2,\r\n                // tasks:[\r\n                  // {\r\n                    // taskId: 2.1,\r\n                    // taskTitle: 'Loose weight ',\r\n                    // taskComplete: false\r\n                  // },\r\n                  // {\r\n                    // taskId: 2.2,\r\n                    // taskTitle: 'Learn Python',\r\n                    // taskComplete: false\r\n                  // }\r\n                // ]\r\n              // }\r\n            ]\r\n      }\r\n    }\r\n\r\n}  \r\n    \r\n \r\n\r\n listHolderStyle={\r\n    width: '100vw',\r\n    margin: '0',\r\n    padding: '5px',\r\n    border:'solid 1px #111111',\r\n    display: 'flex',\r\n    flexWrap: 'wrap' \r\n\r\n}\r\n\r\nsaveTaskLists(){\r\n  let taskListData = JSON.stringify(this.state.TaskLists)\r\n  localStorage.setItem('saveData', taskListData);\r\n}\r\n\r\n\r\nloadTaskLists(){\r\n  let taskListData = localStorage.getItem('saveData')\r\n  return JSON.parse(taskListData);\r\n}\r\n\r\n\r\naddTask = (listId, taskInput) =>{\r\n this.setState({TaskLists: this.state.TaskLists.map((tasklist) => {\r\n  if(listId === tasklist.listId){\r\n    tasklist.numTasks = tasklist.numTasks + 1\r\n    let taskId = listId.toString() +\".\" +tasklist.numTasks.toString()\r\n    const newTask = {\r\n      taskId,\r\n      taskTitle: taskInput,\r\n      taskComplete: false\r\n      \r\n    }\r\n    tasklist.tasks.push(newTask)\r\n    tasklist.completion = this.setPercentage(tasklist)\r\n    return tasklist\r\n    }\r\n    return tasklist\r\n  }) \r\n})\r\n\r\n}\r\n\r\n\r\n setPercentage = (tasklist) =>{\r\n   let completeCounter = 0;\r\n   tasklist.tasks.forEach(task => {\r\n    if(task.taskComplete === true){\r\n      completeCounter++;\r\n    } \r\n   });\r\n   let percentage = (completeCounter / tasklist.numTasks * 100).toFixed(0);\r\n   percentage = percentage.toString()+'%'\r\n   console.log(percentage);\r\n   return percentage;\r\n }\r\n\r\n editTask = (listId, taskId, edit) =>{\r\n    console.log(listId, taskId, edit)\r\n    this.setState({TaskLists: this.state.TaskLists.map((tasklist) =>{\r\n      if(listId === tasklist.listId){\r\n        tasklist.tasks.map((task) =>{\r\n          if(taskId === task.taskId){\r\n            task.taskTitle = edit\r\n            console.log(task.taskTitle)\r\n            return task\r\n          }\r\n        })\r\n      }\r\n\r\n      return tasklist\r\n    })\r\n  })\r\n }\r\n\r\n markComplete = (listId, taskId) =>{\r\n        console.log(listId, taskId)\r\n        this.setState({ TaskLists: this.state.TaskLists.map((tasklist) => {\r\n          if(listId === tasklist.listId){\r\n            tasklist.tasks.map((task) => {\r\n              if(taskId === task.taskId){\r\n                task.taskComplete = true;\r\n                tasklist.completion = this.setPercentage(tasklist);\r\n                return task\r\n                \r\n              } \r\n            })\r\n          }\r\n          return tasklist  \r\n        })  \r\n      });\r\n }\r\n\r\n\r\n  modalOpen = () =>{\r\n    console.log('open')\r\n    if(this.state.modalShow === false){\r\n      this.setState({ modalShow: true})\r\n    }\r\n  } \r\n\r\n  modalClose = () =>{\r\n    console.log('close')\r\n    if(this.state.modalShow === true){\r\n      this.setState({modalShow: false})\r\n    }\r\n  } \r\n\r\n  modalToggleElement = {\r\n    display: 'inline-block',\r\n    color: '#111',\r\n    margin: '5px'\r\n\r\n  }\r\n\r\n  newTaskList = (listInfo) => {\r\n      console.log(listInfo)\r\n      this.setState({numLists: this.state.numLists + 1})\r\n      let listTasks = []\r\n      let taskCounter = 1\r\n\r\n      listInfo.listTasks.forEach((taskInfo)=> {\r\n          let newTask = {\r\n            taskId: this.state.numLists + (taskCounter * 0.1),\r\n            taskTitle: taskInfo.taskTitle,\r\n            taskComplete: false\r\n          }\r\n\r\n          listTasks.push(newTask)\r\n          taskCounter++\r\n      })\r\n\r\n      let TaskList = {\r\n        listId: this.state.numLists,\r\n        title: listInfo.listTitle,\r\n        dueDate: listInfo.listDate,\r\n        completion: '0%',\r\n        locked: false,\r\n        numTasks: listInfo.numTasks,\r\n        tasks: listTasks\r\n      }\r\n\r\n      this.setState({TaskLists: [...this.state.TaskLists, TaskList]})\r\n  }\r\n\r\n\r\n  deleteTaskList = (listId) =>{\r\n    let newTaskLists = [];\r\n    this.state.TaskLists.forEach((tasklist) =>{\r\n        if(tasklist.listId !== listId) newTaskLists.push(tasklist);\r\n    })\r\n\r\n    this.setState({TaskLists: newTaskLists});\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n      if(this.state.TaskLists !== prevState.TaskLists){\r\n        console.log('saving...')\r\n        this.saveTaskLists()\r\n      }\r\n  }\r\n  render() {\r\n    return (\r\n       <div>\r\n         <PageHeader title={'Task Board'} />\r\n         <ListFormModal modalShow={this.state.modalShow} modalClose={this.modalClose} newTaskList={this.newTaskList}/>\r\n         <span onClick={this.modalOpen} style={{float: \"right\", borderRadius: '4px', border: '1px solid #111', cursor:\"pointer\", margin: '3px'}}>\r\n           <h5 style={this.modalToggleElement} >Create List</h5>\r\n           <i style={this.modalToggleElement} className={'material-icons'} >add</i>\r\n         </span>\r\n         <div style={this.listHolderStyle} className = {'TaskList-Holder'} >\r\n           <Lists tasklists={this.state.TaskLists} markComplete={this.markComplete} addTask={this.addTask} editTask={this.editTask} deleteTaskList={this.deleteTaskList} />\r\n         </div>\r\n       </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}